# sk + tk - L199 ---------------------------------------------------------------------------------------------


# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
# class Solution:
#     def rightSideView(self, root: Optional[TreeNode]) -> List[int]:
#         # 11/4/24) Mon) 705 to 715pm) tk)
#         return_list = []
#         queue1 = deque()
        
#         # first check for these edge cases
#         if not root: # check no node
#             return []
        
#         # start
#         queue1.append(root)
#         # run bfs
#         while queue1:            
#             level_len = len(queue1)
#             for i in range(level_len):
#                 node = queue1.popleft()
#                 if i == level_len - 1: #last item on the queue at this level is the first rightmost
#                     return_list.append(node.val)

#                 if node.left is not None:
#                     queue1.append(node.left)
#                 if node.right is not None:
#                     queue1.append(node.right)                

#         return return_list
    
class Solution:
        def rightSideView(self, root: Optional[TreeNode]) -> List[int]:

            result = []
            queue = deque([root])

            while queue:
                
                node = queue.popleft()
                if node:
                    result.append(node.val)

                    if node.right:
                        queue.append(node.right)
            return result


            




# sk + tk - L525 ----------------------------------------------------------------------------------------------

# class Solution:
#     def findMaxLength(self, nums: List[int]) -> int:

#         sum_map = {0: -1}
#         sum_sub = 0
#         max_length = 0
        
#         for i in range(len(nums)):

#             if nums[i] == 1:
#                 sum_sub = sum_sub + 1
#             else:
#                 sum_sub = sum_sub - 1
            
#             if sum_sub in sum_map:
#                 length = i - sum_map[sum_sub]
#                 if length > max_length:
#                     max_length = length
            
#             else:
#                 sum_map[sum_sub] = i
        
#         return max_length


class Solution:
    def findMaxLength(self, nums: List[int]) -> int:

        sum_map = {0: -1}
        sum_sub = 0
        max_length = 0

        for i in range(len(nums)):

            if nums[i] == 1:
                sum_sub = sum_sub + 1
            else:
                sum_sub = sum_sub -1
            
            if sum_sub in sum_map:
                length = (i - sum_map[sum_sub])
                if length > max_length:
                    max_length = length
            else:
                sum_map[sum_sub] = i

        return max_length
            
        

# sk? - L450 --------------------------------------------------------------------------------------------------

class Solution:
    def deleteNode(self, root: Optional[TreeNode], key: int) -> Optional[TreeNode]:
        if not root:
            return None
        
        original_root = root

        # Helper DFS function to find the leftmost (successor) or rightmost (predecessor) node
        def dfs(parent, node, direction):
            while node.left:  # Find the leftmost node in the subtree
                parent = node
                node = node.left
                direction = "L"
            return parent, node, direction

        parent = None
        direction = None

        # Step 1: Locate the node to delete
        while root and root.val != key:
            parent = root
            if key < root.val:
                direction = "L"
                root = root.left
            else:
                direction = "R"
                root = root.right

        # If the key is not found, return the original tree
        if not root:
            return original_root

        # Step 2: Handle deletion cases
        # Case 1: Node is a leaf
        if not root.left and not root.right:
            if direction == "L":
                parent.left = None
            elif direction == "R":
                parent.right = None
            else:
                return None  # The node is the root and is the only node

        # Case 2: Node has one child
        elif not root.left or not root.right:
            child = root.left if root.left else root.right
            if direction == "L":
                parent.left = child
            elif direction == "R":
                parent.right = child
            else:
                return child  # The node is the root

        # Case 3: Node has two children
        else:
            # Use DFS to find the in-order successor
            successor_parent, successor, successor_dir = dfs(root, root.right, "R")

            # Replace the current node's value with the successor's value
            root.val = successor.val

            # Remove the successor node
            if successor_dir == "L":
                successor_parent.left = successor.right
            else:
                successor_parent.right = successor.right

        return original_root

#sk - L54 --------------------------------------------------------------------------


# class Solution:
#     def spiralOrder(self, matrix: List[List[int]]) -> List[int]:
        
#         left, top, right, bottom = 0,0, len(matrix[0])-1, len(matrix)-1

#         if not matrix:
#             return []
        
#         result = []

#         while left <= right and bottom >= top:

#             for i in range(left, right+1):
#                 result.append(matrix[top][i])
#             top = top + 1

#             for i in range(top, bottom+1):
#                 result.append(matrix[i][right])
            
#             right = right -1 

#             if bottom >= top:
#                 for i in range(right, left - 1, -1):
#                     result.append(matrix[bottom][i])
#                 bottom = bottom - 1

#             if left <= right:
#                 for i in range(bottom, top -1, -1):
#                     result.append(matrix[i][left])
#                 left = left + 1
            
#         return result
            

class Solution:
    def spiralOrder(self, matrix: List[List[int]]) -> List[int]:

        left, top, right, bottom = 0, 0, len(matrix[0])-1, len(matrix)-1
        result = []

        while left <= right and bottom >= top:

            for i in range(left, right+1):
                result.append(matrix[top][i])
            
            top = top + 1

            for i in range(top, bottom+1):
                result.append(matrix[i][right])
            
            right = right - 1

            if top <= bottom and left <= right:
                for i in range(right, left-1, -1):
                    result.append(matrix[bottom][i])
                bottom = bottom - 1
            
            if top <= bottom and left <= right:
                for i in range(bottom, top-1, -1):
                    result.append(matrix[i][left])
                
                left = left + 1
            
        return result


#sk - L13 ------------------------------------------------------------------------------------------
            
class Solution:
    def romanToInt(self, s: str) -> int:
        mapping_dict = {
            'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C':100,
            'D': 500, 'M':1000
        }         
            
        value = 0
        for i in range(len(s)):
            if value == 0:
                value = value + mapping_dict[s[i]]
            
            elif i == len(s) - 1:
                value = value + (mapping_dict[s[i]])
            
            else:
                if mapping_dict[s[i]] < mapping_dict[s[i+1]]:
                    value = value + (-1*mapping_dict[s[i]])
                
                else:
                    value = value + (mapping_dict[s[i]])
        
        return value
            
            

        

# sk 226  ------------------------------------------------------------------------------------------------

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def invertTree(self, root: Optional[TreeNode]) -> Optional[TreeNode]:

        result = []
        queue = deque([root])

        while queue:
            node = queue.popleft()
            if node:

                if node.left:
                    original_right = node.right
                    node.right = node.left
                    queue.append(node.left)

                if node.right:
                    node.left = original_right
                    queue.append(original_right)
        
        return root
      


            

# sk L103 ---------------------------------------------------------------------

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    from collections import deque
    def zigzagLevelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:

        queue = deque([root])
        count = 0
        result = []

        if not root:
            return []

        while queue:
            level_size = len(queue)
            count = count + 1
            level = []
            for i in range(level_size):

                node = queue.popleft()
                level.append(node.val)

                
                if count % 2 != 0:
                    if node.right:
                        queue.append(node.right)
                    if node.left:
                        queue.append(node.left)
                
                
                else:
                    if node.left:
                      queue.append(node.left)
                    if node.right:
                      queue.append(node.right)
            result.append(level)
        return result
                


            
        

# sk L56 ----------------------------------------------------------------------

# class Solution:
#     def merge(self, intervals: List[List[int]]) -> List[List[int]]:

#         # 10/9/24, 1128pm to 1145pm, Wed night
#         intervals.sort()
#         result_intervals = []

#         for j in intervals:

#             if not result_intervals: #why do we need this?
#                 result_intervals.append(j)
#             if j[0] <= result_intervals[-1][1]: # check to see if the end interval of the last item is less than the start interval of the current item.
#                 left = result_intervals[-1][0] #the new left
#                 right = max(j[1], result_intervals[-1][1]) #the new right
#                 new_item = [left, right]
                
#                 #now remove the last item
#                 result_intervals.pop()
#                 #and enter in the newly constructed item
#                 result_intervals.append(new_item)
#             else:
#                 result_intervals.append(j)

#         return result_intervals 

# class Solution:
#     def merge(self, intervals: List[List[int]]) -> List[List[int]]:
         
#         intervals.sort(key=lambda x: x[0])
#         merged_intervals = []
#         for i in range(len(intervals)):
            
#             if not merged_intervals:
#                 merged_intervals.append(intervals[i])

#             if  merged_intervals[-1][1] >= intervals[i][0]:

#                 max_end = max(intervals[i][1], merged_intervals[-1][1])
#                 new_interval = [merged_intervals[-1][0], max_end]
#                 merged_intervals[-1] = new_interval
            
#             else:
#                 merged_intervals.append(intervals[i])

#         return merged_intervals


class Solution:
    def merge(self, intervals: List[List[int]]) -> List[List[int]]:

        merged_intervals = []
        intervals.sort(key=lambda x: x[0])
        for i in intervals:

            if not merged_intervals:
                merged_intervals.append(i)
            
          
            elif merged_intervals[-1][1] >= i[0]:
                    max_end = max(merged_intervals[-1][1],i[1] )
                    first_element = merged_intervals[-1][0]
                    merged_intervals[-1] = ([first_element, max_end])
            else:
                merged_intervals.append(i)
            
        
        return merged_intervals



# sk L236 ---------------------------------------------------------------------


# class TreeNode:
#     def __init__ (self,x):
#         self.val = x
#         self.left = None
#         self.right = None


# class Solution:
#     def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        
#         if root == None or root == p or root == q:
#             return root
        
#         left = self.lowestCommonAncestor(root.left, p, q)
#         right = self.lowestCommonAncestor(root.right, p, q)

#         if left and right:
#             return root
        
#         if left:
#             return left
        
#         elif right:
#             return right

class TreeNode:
    def __init__ (self,x):
        self.val = x
        self.left = None
        self.right = None


class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':


        if root == p or root == q or root == None:
            return root
        
        left = self.lowestCommonAncestor(root.left, p, q)
        right = self.lowestCommonAncestor(root.right, p, q)

        if left and right:
            return root
        
        if left:
            return left
        
        if right:
            return right


# sk L215 ---------------------------------------------------------------------

class Solution:
    import heapq
    def findKthLargest(self, nums: List[int], k: int) -> int:

        k_elements = nums[:k]
        heapq.heapify(k_elements)

        for i in nums[k:]:
            if i > k_elements[0]:
                heapq.heapreplace(k_elements, i)
        
        return k_elements[0]


class Solution:
    import heapq
    def findKthLargest(self, nums: List[int], k: int) -> int:
        
        k_elements = nums[:k]
        heapq.heapify(k_elements)

        for i in nums[k+1:]:

            if i > k_elements[0]:
                heapq.heapreplace(k_elements, i)
        
        return k_elements[0]








# sk L5 ----------------------------------------------------------------------------------------------

class Solution:
    def longestPalindrome(self, s: str) -> str:


        def getthesubstring(s, left, right):

            while left >= 0 and right <= len(s) -1 and s[left] == s[right]:

                left = left - 1
                right = right + 1
            
            return s[left+1:right]

        
        max_substring = ""
        for i in range(len(s)):
            
            odd_substring = getthesubstring(s,i,i)
            even_substring = getthesubstring(s,i,i+1)
            
            if len(odd_substring) > len(max_substring):
                max_substring = odd_substring

            if len(even_substring) > len(max_substring):
                max_substring = even_substring
        
        return max_substring
            


class Solution:
    def longestPalindrome(self, s: str) -> str:

        def getsubstring (left,right):

            while left >= 0 and right <= len(s) - 1 and s[left] == s[right]:
                
                left = left - 1
                right = right + 1
            
            return s[left+1:right]

        max_substring = ""
        for i in range(len(s)):
            
            odd_string = getsubstring(i, i)
            even_string = getsubstring(i, i+1)

            if len(odd_string) > len(max_substring):
                max_substring = odd_string
            if len(even_string) > len(max_substring):
                max_substring = even_string
        
        return max_substring


        


# sk - l73 -------------------------------------------------------------------------------------------

# class Solution:
#     def setZeroes(self, matrix: List[List[int]]) -> None:
#         """
#         Do not return anything, modify matrix in-place instead.
#         """
#         rows = len(matrix)
#         columns = len(matrix[0])

#         row_first_flag = None
#         column_first_flag = None

#         for column in range(columns):
#            if matrix[0][column] == 0:
#               row_first_flag = True
        
#         for row in range(rows):
#              if matrix[row][0] == 0:
#                 column_first_flag = True
        
#         for row in range(rows):
#             for column in range(columns):
#                 if matrix[row][column] == 0:
#                     matrix[0][column] = 0
#                     matrix[row][0] = 0
        
#         for row in range(1,rows):
#             for column in range(1,columns):
#                 if matrix[0][column] == 0 or matrix[row][0] == 0:
#                     matrix[row][column] = 0
        
#         if row_first_flag:
#             for column in range(columns):
#                 matrix[0][column] = 0
        
#         if column_first_flag:
#             for row in range(rows):
#                 matrix[row][0] = 0

class Solution:
    def setZeroes(self, matrix: List[List[int]]) -> None:
        """
        Do not return anything, modify matrix in-place instead.
        """

        rows = len(matrix)
        columns = len(matrix[0])

        first_row_zero = False
        first_column_zero = False

        for column in range(columns):
            if matrix[0][column] == 0:
                first_row_zero = True
        
        for row in range(rows):
            if matrix[row][0] == 0:
                first_column_zero = True
        
        for row in range(rows):
            for column in range(columns):
                if matrix[row][column] == 0:
                    matrix[0][column] = 0
                    matrix[row][0] = 0
        
        for row in range(1,rows):
            for column in range(1,columns):
                if matrix[0][column] == 0 or matrix[row][0] == 0:
                    matrix[row][column] = 0
        
        if first_row_zero:
            for column in range(columns):
                matrix[0][column] = 0
        
        if first_column_zero:
            for row in range(rows):
                matrix[row][0] = 0

                

# sk - L3 -----------------------------------------------------------------------

# class Solution:
#     def lengthOfLongestSubstring(self, s: str) -> int:
#         max_length = 1
#         left = 0
#         right = 0
#         string_map = {}
#         string_map[s[right]] = right
#         length = 1
#         while right <= len(s)-2:
#             right = right + 1
#             if s[right] in string_map:
#                 left = string_map[s[right]] + 1
#                 length = 1
#             else:
#                 string_map[s[right]] = right
#                 length = length + 1
#             if length > max_length:
#                 max_length = length

#         return max_length            

# class Solution:
#     def lengthOfLongestSubstring(self, s: str) -> int:
#         character_dict = {}
#         right = 0
#         left = 0
#         max_length = 0
#         for i in range(len(s)):

#             if s[right] not in character_dict:
#                 character_dict[s[right]] = right
            
#             else:
#                 left = character_dict[s[right]] + 1
#                 character_dict[s[right]] = right

            
#             length = (right - left) + 1
#             if length > max_length:
#                 max_length = length
            
#             right = right + 1

#         return max_length 

# class Solution:
#     def lengthOfLongestSubstring(self, s: str) -> int:

#         if len(s) == 1:
#             return 1
#         if len(s) == "":
#             return 0

#         left = 0
#         right = 1
#         length = 0
#         max_length = 0
#         sub_array = [s[0]]

#         for i in range(len(s)-1):
#             if sub_array and s[right] in sub_array:
#                 left = right
#                 length = len(sub_array)
#                 sub_array = [s[left]]
#             elif  s[left] == s[right]:
#                 left = left + 1
#                 length = len(sub_array)
#                 sub_array = sub_array[left:]
            
#             else:
#                 length = len(sub_array)
#                 sub_array.append(s[right])
                

#             if length > max_length:
#                 max_length = length
#             right = right + 1
        
#         return max_length
            

class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:

        if len(s) == 1:
            return 1
        if len(s) == "":
            return 0   

        left = 0
        right = 1
        sub_array = [s[0]]
        max_length = 0

        while left <= right and right < len(s):
            if s[left] == s[right]:
                left = left + 1
                sub_array[left:]
            elif s[right] in sub_array:
                left = right
                sub_array = [s[left]]
            else:
                sub_array.append(s[right])
            
            length = len(sub_array)
            if length > max_length:
                max_length = length
            right = right + 1
        
        return max_length



        





# sk - L53 -----------------------------------------------------------------------


# class Solution:
#     def maxSubArray(self, nums: List[int]) -> int:
#         current_sum = nums[0]
#         max_sum = nums[0]
#         for i in range(1,len(nums)):
#             if max(nums[i], current_sum+nums[i]) == nums[i]:
#                 current_sum = nums[i]
#             else:
#                 current_sum = current_sum + nums[i]
                
#             if current_sum > max_sum:
#                 max_sum = current_sum
#         return max_sum

# class Solution:
#     def maxSubArray(self, nums: List[int]) -> int:
#         max_sum = nums[0]
#         current_sum = nums[0]
#         for i in range(1, len(nums)):
#             if max(nums[i], nums[i] + current_sum) == nums[i]:
#                 current_sum = nums[i]
#             else:
#                 current_sum = current_sum + nums[i]
            
#             if current_sum > max_sum:
#                 max_sum = current_sum
        
#         return max_sum
               
class Solution:
    def maxSubArray(self, nums: List[int]) -> int:

        running_sum = 0
        result = []
        max_sum = 0

        for i in range(len(nums)):

            if max(nums[i], nums[i]+running_sum) == nums[i]:
                running_sum = nums[i]
                if running_sum > max_sum:
                    max_sum = running_sum
            
            else:
                running_sum = running_sum + nums[i]
                if running_sum > max_sum:
                    max_sum = running_sum
        
        return max_sum
        
            


# sk - L102 -----------------------------------------------------------------------

# # Definition for a binary tree node.
# # class TreeNode:
# #     def __init__(self, val=0, left=None, right=None):
# #         self.val = val
# #         self.left = left
# #         self.right = right
# class Solution:
#     from collections import deque

#     def levelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:

#         result = []

#         if root:
#             queue = deque([root])
        
#         if not root:
#             return []


        
#         while queue:

#             level_size = len(queue)
#             level = []

#             for i in range(level_size):
            
#                 node = queue.popleft()
#                 level.append(node.val)

#                 if node.left:
#                     queue.append(node.left)
#                 if node.right:
#                     queue.append(node.right)
            
#             result.append(level)
#         return result
        
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    from collections import deque
    def levelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:

            if root:
                queue = deque([root])

            if not root:
                return []

            results = []
            while queue:
                level_size = len(queue)
                level = []
                for i in range(level_size):
                    node = queue.popleft()
                    level.append(node.val)

                    if node.left:
                        queue.append(node.left)
                    if node.right:
                        queue.append(node.right)
                results.append(level)
            return results


            




        

# sk - L380 -----------------------------------------------------------------------

# class RandomizedSet:

#     def __init__(self):

#         self.list = []
#         self.index_mapping = {}
        

#     def insert(self, val: int) -> bool:

#         if val in self.list:
#             return False
        
#         self.list.append(val)
#         self.index_mapping[val] = len(self.list)-1
#         return True

        
#     def remove(self, val: int) -> bool:

#         if val not in self.list:
#             return False
        
#         index = self.index_mapping[val]
#         last_element = self.list[-1]
#         self.list[index] = last_element
#         self.index_mapping[last_element] = index

#         self.list.pop()
#         del self.index_mapping[val]
#         return True

#     def getRandom(self) -> int:

#         import random

#         return random.choice(self.list)
        
        
class RandomizedSet:

    def __init__(self):

        self.stack = []
        self.index_mapping = {}
        

    def insert(self, val: int) -> bool:

        if val in self.index_mapping:
            return False
        else:
            self.stack.append(val)
            self.index_mapping[val] = len(self.stack) -1
            return True
        
    def remove(self, val: int) -> bool:

        if val not in self.index_mapping:
            return False
        
        else:
            self.stack.pop(self.index_mapping[val])
            del self.index_mapping[val]
            return True

    def getRandom(self) -> int:
        import random
        return (random.choice(self.stack))

  

# Your RandomizedSet object will be instantiated and called as such:
# obj = RandomizedSet()
# param_1 = obj.insert(val)
# param_2 = obj.remove(val)
# param_3 = obj.getRandom()

# sk - L200 -----------------------------------------------------------------------

# class Solution:
#     def numIslands(self, grid: List[List[str]]) -> int:

#         if not grid:
#             return 0


#         def dfs(i,j):

#             if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] == '0':
#                 return
            
#             grid[i][j] = '0'

#             dfs(i-1, j)
#             dfs(i+1, j)
#             dfs(i,j-1)
#             dfs(i,j+1)


#         island_count = 0
#         for i in range(len(grid)):
#             for j in range(len(grid[0])):

#                 if grid[i][j] == '1':
#                     island_count = island_count + 1
#                     dfs(i,j)
        
#         return island_count




class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:

        

        num_islands = 0
        if not grid:
             return 0

        def dfs(i,j):

            if i < 0 or j < 0 or i >= len(grid) or j >= len(grid[0]) or grid[i][j] == '0':
               return 
            
            grid[i][j] = '0'

            dfs(i-1, j) 
            dfs(i+1, j) 
            dfs(i, j-1) 
            dfs(i, j+1) 


        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == '1':
                    num_islands = num_islands + 1
                    dfs(i,j)
        return num_islands



        



# sk - L146 -----------------------------------------------------------------------




class Node :

    def __init__(self, key, value):

        self.key = key
        self.value = value
        self.next = None
        self.prev = None


class LRUCache:

    def __init__(self, capacity: int):

        self.capacity = capacity
        self.cache = {}
        self.head = Node(0,0)
        self.tail = Node(0,0)
        self.head.next = self.tail
        self.tail.prev = self.head
        
    def move_node(self, node):
        node.prev.next = node.next
        node.next.prev = node.prev

        node.next = self.head.next
        node.prev = self.head
        self.head.next.prev = node
        self.head.next = node

    def add_node(self, node):

        node.next = self.head.next
        node.prev = self.head

        self.head.next = node
        node.next.prev = node 

    def remove_tail_node(self):

        last_node = self.tail.prev

        last_node.prev.next = self.tail
        self.tail.prev = last_node.prev

        return last_node
            

    def get(self, key: int) -> int:

        if key in self.cache:
            node = self.cache[key]
            self.move_node(node)
            return node.value

        return -1
        
    def put(self, key: int, value: int) -> None:

        if key in self.cache:
            node = self.cache[key]
            node.value = value
            self.move_node(node)
        
        else:

            node = Node(key,value)

            self.cache[key] = node
            self.add_node(node)

            if len(self.cache) > self.capacity:
                tail_node = self.remove_tail_node() 
                del self.cache[tail_node.key]
        


# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)


# sk - L347 -----------------------------------------------------------------------


# class Solution:
#     def topKFrequent(self, nums: List[int], k: int) -> List[int]:
#         result_dict = {}
#         heap = []
#         for i in nums:
#             if i in result_dict:
#                 result_dict[i] = result_dict[i] + 1
#             else:
#                 result_dict[i] = 1
        
        
#         for key, value in result_dict.items():
#             heapq.heappush(heap, (-value, key) )
        
#         res = []
#         while len(res) < k:
#             res.append(heapq.heappop(heap)[1])
        
#         return res


class Solution:
    import heapq
    def topKFrequent(self, nums: List[int], k: int) -> List[int]:
        frequency_dict = {}
        for i in nums:
            if i in frequency_dict:
                frequency_dict[i] = frequency_dict[i] + 1
            else: 
                frequency_dict[i] = 1
        
        heap = []

        for key, value in frequency_dict.items():
            heapq.heappush(heap, (-value, key) )
        
        result = []

        while len(result) < k:
           result.append(heapq.heappop(heap)[1])
        
        return result
            
            



# sk - L23 -----------------------------------------------------------------------

# #Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next


# class Solution:
#     import heapq
#     def mergeKLists(self, lists: List[Optional[ListNode]]) -> Optional[ListNode]:

#         heap = []
        
#         for i, head in enumerate(lists):
#             if head:  
#                 heapq.heappush(heap, (head.val, i, head))  
        
#         Dummy = ListNode()
#         current = Dummy


#         while heap:

#             value, index, node = heapq.heappop(heap)

#             current.next = node
#             current = current.next

#             if node.next:
#                 heapq.heappush(heap, (node.next.val, index, node.next))

#         return Dummy.next

        
#Definition for singly-linked list.
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next


class Solution:
    import heapq
    def mergeKLists(self, lists: List[Optional[ListNode]]) -> Optional[ListNode]:


        heap = []
        Dummy = ListNode()
        current = Dummy

        for i,head in enumerate(lists):
            if head:
                heapq.heappush(heap, (head.val, i, head))  
            
        while heap:
            value, index, node = heapq.heappop(heap)
            current.next = node
        

            if node.next:
                heapq.heappush(heap, (node.next.val, index, node.next))
            current =  current.next
        
        return Dummy.next

